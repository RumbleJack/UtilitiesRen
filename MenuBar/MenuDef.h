#ifndef MENU_ICON_DEFINITION
#define MENU_ICON_DEFINITION
#include "SysDef.h"
#include "MenuIDDef.h"

/*-----------单个菜单按键属性 -----------*/
/* id: 每个按键有一个独特的id */
/* pTitle: 按键字符串指针 */
/* CntSubMenu: 按键下级菜单中菜单项数目 */
/* pSubMenu 按键下级菜单中菜单项数组 */
/*---------------------------------------*/
struct STRUCT_ICON
{
	WORD id ;
	const WCHAR *pTitle ;
	int CntSubMenu ;
	const struct STRUCT_ICON *pSubMenu ;
};

/*-------------------------------------------------------------------------------*/
/*-----------------------------------二级菜单项----------------------------------*/
/*-------------------------------------------------------------------------------*/
const WCHAR TITLE_ICON_FILE_SETTING[] = _T("设置") ;
const STRUCT_ICON ICON_FILE_SETTING = {ID_ICON_FILE_SETTING, TITLE_ICON_FILE_SETTING, 0, NULL} ;

const WCHAR TITLE_ICON_FILE_REPORT[] = _T("报告") ;
const STRUCT_ICON ICON_FILE_REPORT = {ID_ICON_FILE_REPORT, TITLE_ICON_FILE_REPORT, 0, NULL} ;

const WCHAR TITLE_ICON_FILE_DATA[] = _T("数据") ;
const STRUCT_ICON ICON_FILE_DATA = {ID_ICON_FILE_DATA, TITLE_ICON_FILE_DATA, 0, NULL} ;

const WCHAR TITLE_ICON_FILE_IMAGE[] = _T("图像") ;
const STRUCT_ICON ICON_FILE_IMAGE = {ID_ICON_FILE_IMAGE, TITLE_ICON_FILE_IMAGE, 0, NULL} ;

const WCHAR TITLE_ICON_FILE_DATA_SETTING[] = _T("数据设置") ;
const STRUCT_ICON ICON_FILE_DATA_SETTING = {ID_ICON_FILE_DATA_SETTING, TITLE_ICON_FILE_DATA_SETTING, 0, NULL} ;

const STRUCT_ICON FILE_MENU[] = {ICON_FILE_SETTING, 
									ICON_FILE_REPORT, 
									ICON_FILE_DATA, 
									ICON_FILE_IMAGE, 
									ICON_FILE_DATA_SETTING
								} ;

const WCHAR TITLE_ICON_WIZARD_WORKPIECE[] = _T("工件&焊缝") ;
const STRUCT_ICON ICON_WIZARD_WORKPIECE = {ID_ICON_WIZARD_WORKPIECE, TITLE_ICON_WIZARD_WORKPIECE, 0, NULL} ;

const WCHAR TITLE_ICON_WIZARD_SETTING[] = _T("设置") ;
const STRUCT_ICON ICON_WIZARD_SETTING = {ID_ICON_WIZARD_SETTING, TITLE_ICON_WIZARD_SETTING, 0, NULL} ;

const WCHAR TITLE_ICON_WIZARD_CORRECT[] = _T("校准") ;
const STRUCT_ICON ICON_WIZARD_CORRECT = {ID_ICON_WIZARD_CORRECT, TITLE_ICON_WIZARD_CORRECT, 0, NULL} ;

const STRUCT_ICON WIZARD_MENU[] = {ICON_WIZARD_WORKPIECE, 
									ICON_WIZARD_SETTING, 
									ICON_WIZARD_CORRECT
								} ;

const WCHAR TITLE_ICON_UT_BASIC[] = _T("一般") ;
const STRUCT_ICON ICON_UT_BASIC = {ID_ICON_UT_BASIC, TITLE_ICON_UT_BASIC, 0, NULL} ;

const WCHAR TITLE_ICON_UT_PULSE[] = _T("脉冲发生器") ;
const STRUCT_ICON ICON_UT_PULSE = {ID_ICON_UT_PULSE, TITLE_ICON_UT_PULSE, 0, NULL} ;

const WCHAR TITLE_ICON_UT_RECEIVER[] = _T("接收器") ;
const STRUCT_ICON ICON_UT_RECEIVER = {ID_ICON_UT_RECEIVER, TITLE_ICON_UT_RECEIVER, 0, NULL} ;

const WCHAR TITLE_ICON_UT_BEAM[] = _T("声束") ;
const STRUCT_ICON ICON_UT_BEAM = {ID_ICON_UT_BEAM, TITLE_ICON_UT_BEAM, 0, NULL} ;

const WCHAR TITLE_ICON_UT_ADVANCE[] = _T("高级") ;
const STRUCT_ICON ICON_UT_ADVANCE = {ID_ICON_UT_ADVANCE, TITLE_ICON_UT_ADVANCE, 0, NULL} ;

const STRUCT_ICON UT_SETTING_MENU[] = {ICON_UT_BASIC, 
										ICON_UT_PULSE, 
										ICON_UT_RECEIVER, 
										ICON_UT_BEAM, 
										ICON_UT_ADVANCE
										} ;

const WCHAR TITLE_ICON_MEASURE_CURSOR[] = _T("光标") ;
const STRUCT_ICON ICON_MEASURE_CURSOR = {ID_ICON_MEASURE_CURSOR, TITLE_ICON_MEASURE_CURSOR, 0, NULL} ;

const WCHAR TITLE_ICON_MEASURE_DATA[] = _T("读数") ;
const STRUCT_ICON ICON_MEASURE_DATA = {ID_ICON_MEASURE_DATA, TITLE_ICON_MEASURE_DATA, 0, NULL} ;

const WCHAR TITLE_ICON_MEASURE_REPORT[] = _T("缺陷报表") ;
const STRUCT_ICON ICON_MEASURE_REPORT = {ID_ICON_MEASURE_REPORT, TITLE_ICON_MEASURE_REPORT, 0, NULL} ;

const STRUCT_ICON MEASURE_MENU[] = {ICON_MEASURE_CURSOR, 
									ICON_MEASURE_DATA, 
									ICON_MEASURE_REPORT
									} ;

const WCHAR TITLE_ICON_DISPLAY_SELECTION[] = _T("选择") ;
const STRUCT_ICON ICON_DISPLAY_SELECTION = {ID_ICON_DISPLAY_SELECTION, TITLE_ICON_DISPLAY_SELECTION, 0, NULL} ;

const WCHAR TITLE_ICON_DISPLAY_VIEW[] = _T("视图设置") ;
const STRUCT_ICON ICON_DISPLAY_VIEW = {ID_ICON_DISPLAY_VIEW, TITLE_ICON_DISPLAY_VIEW, 0, NULL} ;

const WCHAR TITLE_ICON_DISPLAY_LAYER[] = _T("覆盖") ;
const STRUCT_ICON ICON_DISPLAY_LAYER = {ID_ICON_DISPLAY_LAYER, TITLE_ICON_DISPLAY_LAYER, 0, NULL} ;

const WCHAR TITLE_ICON_DISPLAY_ZOOM[] = _T("放大") ;
const STRUCT_ICON ICON_DISPLAY_ZOOM = {ID_ICON_DISPLAY_ZOOM, TITLE_ICON_DISPLAY_ZOOM, 0, NULL} ;
   
const WCHAR TITLE_ICON_DISPLAY_ATTR[] = _T("属性") ;
const STRUCT_ICON ICON_DISPLAY_ATTR = {ID_ICON_DISPLAY_ATTR, TITLE_ICON_DISPLAY_ATTR, 0, NULL} ;

const STRUCT_ICON DISPLAY_MENU[] = {ICON_DISPLAY_SELECTION, 
									ICON_DISPLAY_VIEW, 
									ICON_DISPLAY_LAYER, 
									ICON_DISPLAY_ZOOM, 
									ICON_DISPLAY_ATTR
									} ;

const WCHAR TITLE_ICON_ACCURACY_TYPE[] = _T("类型") ;
const STRUCT_ICON ICON_ACCURACY_TYPE = {ID_ICON_ACCURACY_TYPE, TITLE_ICON_ACCURACY_TYPE, 0, NULL} ;

const WCHAR TITLE_ICON_ACCURACY_OPERATOR[] = _T("操作员模式") ;
const STRUCT_ICON ICON_ACCURACY_OPERATOR = {ID_ICON_ACCURACY_OPERATOR, TITLE_ICON_ACCURACY_OPERATOR, 0, NULL} ;

const WCHAR TITLE_ICON_ACCURACY_MODEL[] = _T("类型设置") ;
const STRUCT_ICON ICON_ACCURACY_MODEL = {ID_ICON_ACCURACY_MODEL, TITLE_ICON_ACCURACY_MODEL, 0, NULL} ;

const WCHAR TITLE_ICON_ACCURACY_CURVE[] = _T("曲线设置") ;
const STRUCT_ICON ICON_ACCURACY_CURVE = {ID_ICON_ACCURACY_CURVE, TITLE_ICON_ACCURACY_CURVE, 0, NULL} ;

const STRUCT_ICON ACCURACY_MENU[] = {ICON_ACCURACY_TYPE, 
										ICON_ACCURACY_OPERATOR,
										ICON_ACCURACY_MODEL,
										ICON_ACCURACY_CURVE
									} ;

const WCHAR TITLE_ICON_GATE_ALARM_GATE[] = _T("闸门") ;
const STRUCT_ICON ICON_GATE_ALARM_GATE = {ID_ICON_GATE_ALARM_GATE, TITLE_ICON_GATE_ALARM_GATE, 0, NULL} ;

const WCHAR TITLE_ICON_GATE_ALARM_ALARM[] = _T("报警") ;
const STRUCT_ICON ICON_GATE_ALARM_ALARM = {ID_ICON_GATE_ALARM_ALARM, TITLE_ICON_GATE_ALARM_ALARM, 0, NULL} ;

const WCHAR TITLE_ICON_GATE_ALARM_EXPORT[] = _T("输出") ;
const STRUCT_ICON ICON_GATE_ALARM_EXPORT = {ID_ICON_GATE_ALARM_EXPORT, TITLE_ICON_GATE_ALARM_EXPORT, 0, NULL} ;

const WCHAR TITLE_ICON_GATE_ALARM_SIMULATE[] = _T("模拟") ;
const STRUCT_ICON ICON_GATE_ALARM_SIMULATE = {ID_ICON_GATE_ALARM_SIMULATE, TITLE_ICON_GATE_ALARM_SIMULATE, 0, NULL} ;

const WCHAR TITLE_ICON_GATE_ALARM_DEPTH[] = _T("厚度") ;
const STRUCT_ICON ICON_GATE_ALARM_DEPTH = {ID_ICON_GATE_ALARM_DEPTH, TITLE_ICON_GATE_ALARM_DEPTH, 0, NULL} ;

const STRUCT_ICON GATE_ALARM_MENU[] = {ICON_GATE_ALARM_GATE, 
										ICON_GATE_ALARM_ALARM, 
										ICON_GATE_ALARM_EXPORT, 
										ICON_GATE_ALARM_SIMULATE, 
										ICON_GATE_ALARM_DEPTH
										} ;

const WCHAR TITLE_ICON_PROBE_WORKPIECE_MANAGER[] = _T("组管理") ;
const STRUCT_ICON ICON_PROBE_WORKPIECE_MANAGER = {ID_ICON_PROBE_WORKPIECE_MANAGER, TITLE_ICON_PROBE_WORKPIECE_MANAGER} ;

const WCHAR TITLE_ICON_PROBE_WORKPIECE_PROBE_WEDGE[] = _T("探头和楔块") ;
const STRUCT_ICON ICON_PROBE_WORKPIECE_PROBE_WEDGE = {ID_ICON_PROBE_WORKPIECE_PROBE_WEDGE, TITLE_ICON_PROBE_WORKPIECE_PROBE_WEDGE} ;

const WCHAR TITLE_ICON_PROBE_WORKPIECE_POSITION[] = _T("位置") ;
const STRUCT_ICON ICON_PROBE_WORKPIECE_POSITION = {ID_ICON_PROBE_WORKPIECE_POSITION, TITLE_ICON_PROBE_WORKPIECE_POSITION} ;

const WCHAR TITLE_ICON_PROBE_WORKPIECE_CHARACTER[] = _T("指定特性") ;
const STRUCT_ICON ICON_PROBE_WORKPIECE_CHARACTER = {ID_ICON_PROBE_WORKPIECE_CHARACTER, TITLE_ICON_PROBE_WORKPIECE_CHARACTER} ;

const WCHAR TITLE_ICON_PROBE_WORKPIECE_WORKPIECE[] = _T("工件") ;
const STRUCT_ICON ICON_PROBE_WORKPIECE_WORKPIECE = {ID_ICON_PROBE_WORKPIECE_WORKPIECE, TITLE_ICON_PROBE_WORKPIECE_WORKPIECE} ;

const STRUCT_ICON PROBE_WORKPIECE[] = {ICON_PROBE_WORKPIECE_MANAGER,
										ICON_PROBE_WORKPIECE_PROBE_WEDGE,
										ICON_PROBE_WORKPIECE_POSITION,
										ICON_PROBE_WORKPIECE_CHARACTER,
										ICON_PROBE_WORKPIECE_WORKPIECE
									} ;

const WCHAR TITLE_ICON_FOCUS_SETTING_SETTING[] = _T("配置") ;
const STRUCT_ICON ICON_FOCUS_SETTING_SETTING = {ID_ICON_FOCUS_SETTING_SETTING, TITLE_ICON_FOCUS_SETTING_SETTING} ;

const WCHAR TITLE_ICON_FOCUS_SETTING_APERTURE[] = _T("孔径") ;
const STRUCT_ICON ICON_FOCUS_SETTING_APERTURE = {ID_ICON_FOCUS_SETTING_APERTURE, TITLE_ICON_FOCUS_SETTING_APERTURE} ;

const WCHAR TITLE_ICON_FOCUS_SETTING_BEAM[] = _T("声束") ;
const STRUCT_ICON ICON_FOCUS_SETTING_BEAM = {ID_ICON_FOCUS_SETTING_BEAM, TITLE_ICON_FOCUS_SETTING_BEAM} ;

const WCHAR TITLE_ICON_FOCUS_SETTING_RULE[] = _T("法则") ;
const STRUCT_ICON ICON_FOCUS_SETTING_RULE = {ID_ICON_FOCUS_SETTING_RULE, TITLE_ICON_FOCUS_SETTING_RULE} ;

const STRUCT_ICON FOCUS_SETTING[] = {ICON_FOCUS_SETTING_SETTING, 
										ICON_FOCUS_SETTING_APERTURE, 
										ICON_FOCUS_SETTING_BEAM, 
										ICON_FOCUS_SETTING_RULE
									} ;

const WCHAR TITLE_ICON_SCAN_IMAGE[] = _T("视图模式") ;
const STRUCT_ICON ICON_SCAN_IMAGE = {ID_ICON_SCAN_IMAGE, TITLE_ICON_SCAN_IMAGE, 0, NULL} ;

const WCHAR TITLE_ICON_SCAN_DETECT[] = _T("检测") ;
const STRUCT_ICON ICON_SCAN_DETECT = {ID_ICON_SCAN_DETECT, TITLE_ICON_SCAN_DETECT, 0, NULL} ;

const WCHAR TITLE_ICON_SCAN_CODER[] = _T("编码器") ;
const STRUCT_ICON ICON_SCAN_CODER = {ID_ICON_SCAN_CODER, TITLE_ICON_SCAN_CODER, 0, NULL} ;

const WCHAR TITLE_ICON_SCAN_REGION[] = _T("区域") ;
const STRUCT_ICON ICON_SCAN_REGION = {ID_ICON_SCAN_REGION, TITLE_ICON_SCAN_REGION, 0, NULL} ;

const WCHAR TITLE_ICON_SCAN_DATA[] = _T("数据") ;
const STRUCT_ICON ICON_SCAN_DATA = {ID_ICON_SCAN_DATA, TITLE_ICON_SCAN_DATA, 0, NULL} ;

const WCHAR TITLE_ICON_SCAN_RUNNING[] = _T("开始") ;
const STRUCT_ICON ICON_SCAN_RUNNING = {ID_ICON_SCAN_RUNNING, TITLE_ICON_SCAN_RUNNING, 0, NULL} ;

const STRUCT_ICON SCAN_MENU[] = {ICON_SCAN_IMAGE, 
							ICON_SCAN_DETECT, 
							ICON_SCAN_CODER,
							ICON_SCAN_REGION, 
							ICON_SCAN_DATA, 
							ICON_SCAN_RUNNING
							} ;

const WCHAR TITLE_ICON_CUSTOM_SETTING[] = _T("设置") ;
const STRUCT_ICON ICON_CUSTOM_SETTING = {ID_ICON_CUSTOM_SETTING, TITLE_ICON_CUSTOM_SETTING, 0, NULL} ;

const WCHAR TITLE_ICON_CUSTOM_DEVICE[] = _T("仪器") ;
const STRUCT_ICON ICON_CUSTOM_DEVICE = {ID_ICON_CUSTOM_DEVICE, TITLE_ICON_CUSTOM_DEVICE, 0, NULL} ;

const WCHAR TITLE_ICON_CUSTOM_TOOLS[] = _T("工具") ;
const STRUCT_ICON ICON_CUSTOM_TOOLS = {ID_ICON_CUSTOM_TOOLS, TITLE_ICON_CUSTOM_TOOLS, 0, NULL} ;

const STRUCT_ICON CUSTOM_MENU[] = {ICON_CUSTOM_SETTING, 
									ICON_CUSTOM_DEVICE, 
									ICON_CUSTOM_TOOLS
									} ;
/*-------------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------------*/
/*-----------------------------------一级菜单项----------------------------------*/
/*-------------------------------------------------------------------------------*/
const WCHAR TITLE_ICON_FILE_SERVER[] = _T("文件管理") ;
const STRUCT_ICON ICON_FILE_SERVER = {ID_ICON_FILE_SERVER, TITLE_ICON_FILE_SERVER, ARRAYSIZE(FILE_MENU), FILE_MENU} ;

const WCHAR TITLE_ICON_WIZARD[] = _T("向导") ;
const STRUCT_ICON ICON_WIZARD = {ID_ICON_WIZARD, TITLE_ICON_WIZARD, ARRAYSIZE(WIZARD_MENU), WIZARD_MENU} ;

const WCHAR TITLE_ICON_UT_SETTING[] = _T("UT设置") ;
const STRUCT_ICON ICON_UT_SETTING = {ID_ICON_UT_SETTING, TITLE_ICON_UT_SETTING, ARRAYSIZE(UT_SETTING_MENU), UT_SETTING_MENU} ;

const WCHAR TITLE_ICON_MEASURE[] = _T("测量") ;
const STRUCT_ICON ICON_MEASURE = {ID_ICON_MEASURE, TITLE_ICON_MEASURE, ARRAYSIZE(MEASURE_MENU), MEASURE_MENU} ;

const WCHAR TITLE_ICON_DISPLAY[] = _T("显示") ;
const STRUCT_ICON ICON_DISPLAY = {ID_ICON_DISPLAY, TITLE_ICON_DISPLAY, ARRAYSIZE(DISPLAY_MENU), DISPLAY_MENU} ;

const WCHAR TITLE_ICON_ACCURACY[] = _T("定量") ;
const STRUCT_ICON ICON_ACCURACY = {ID_ICON_ACCURACY, TITLE_ICON_ACCURACY, ARRAYSIZE(ACCURACY_MENU), ACCURACY_MENU} ;

const WCHAR TITLE_ICON_GATE_ALARM[] = _T("闸门/报警") ;
const STRUCT_ICON ICON_GATE_ALARM = {ID_ICON_GATE_ALARM, TITLE_ICON_GATE_ALARM, ARRAYSIZE(GATE_ALARM_MENU), GATE_ALARM_MENU} ;

const WCHAR TITLE_ICON_PROBE_WORKPIECE[] = _T("探头和工件") ;
const STRUCT_ICON ICON_PROBE_WORKPIECE = {ID_ICON_PROBE_WORKPIECE, TITLE_ICON_PROBE_WORKPIECE, ARRAYSIZE(PROBE_WORKPIECE), PROBE_WORKPIECE} ;

const WCHAR TITLE_ICON_FOCUS_SETTING[] = _T("聚焦法则") ;
const STRUCT_ICON ICON_FOCUS_SETTING = {ID_ICON_FOCUS_SETTING, TITLE_ICON_FOCUS_SETTING, ARRAYSIZE(FOCUS_SETTING), FOCUS_SETTING} ;

const WCHAR TITLE_ICON_SCAN[] = _T("扫查") ;
const STRUCT_ICON ICON_SCAN = {ID_ICON_SCAN, TITLE_ICON_SCAN, ARRAYSIZE(SCAN_MENU), SCAN_MENU} ;

const WCHAR TITLE_ICON_CUSTOM[] = _T("偏好") ;
const STRUCT_ICON ICON_CUSTOM = {ID_ICON_CUSTOM, TITLE_ICON_CUSTOM, ARRAYSIZE(CUSTOM_MENU), CUSTOM_MENU} ;

const STRUCT_ICON ROOT_MENU[] = {ICON_FILE_SERVER, 
							ICON_WIZARD, 
							ICON_UT_SETTING, 
							ICON_MEASURE, 
							ICON_DISPLAY, 
							ICON_ACCURACY,
							ICON_GATE_ALARM, 
							ICON_PROBE_WORKPIECE, 
							ICON_FOCUS_SETTING, 
							ICON_SCAN,
							ICON_CUSTOM
						} ;
/*---------------------------------------------------------------------------------*/

/*-------------------------------------------------------------------------------*/
/*-----------------------------------参数栏定义----------------------------------*/
/*-------------------------------------------------------------------------------*/
enum ENUM_PARAM_ICON_STYLE
{
	VERT_DIVIDED,	// SHOW_PARAM_ONLY
	HORZ_DIVIDED,	// SHOW_PARAM_ONLY
	STATIC_INFO_ONLY, 
	SHOW_PARAM_ONLY, // 只读
	EDIT_PARAM,		 // 编辑
	CHECK_PARAM,	 // 复选
	RADIO_PARAM		 // 单选
}  ;

enum ENUM_BK_BRUSH_STYLE
{
	BK_DEFAULT,
	BK_EDIT
};


struct STRUCT_ENUM_ITEM
{
	WORD id ;
	const WCHAR *pTitle ;
}  ;

union UNION_SUB_ICON_ENUM_ITEM
{
	const struct STRUCT_PARAM_ICON *pSubIcon ;
	const STRUCT_ENUM_ITEM *pEnumItem ;
};

/*----------- 单个参数栏属性 --------------*/
/* id: 每个参数栏有一个独特的id */
/* Style: 参数栏风格 */
/* ParamType: 参数栏数据类型 */
/* BkBrush: 参数栏背景 */
/* pTitle: 参数栏字符串指针 */
/* CntIcon_EnumItem:  参数栏下级项目数 */
/* SubIcon_EnumItem   参数栏下级项目数组指针 或 当前级参数栏多栏指针*/
/*-----------------------------------------*/
 struct STRUCT_PARAM_ICON
{
	WORD id ;			
	ENUM_PARAM_ICON_STYLE	Style ;
	ENUM_PARAM_TYPE		ParamType ;
	ENUM_BK_BRUSH_STYLE	BkBrush ;
	const WCHAR *pTitle ;
	int	CntIcon_EnumItem ;
	UNION_SUB_ICON_ENUM_ITEM	SubIcon_EnumItem ;
}  ;

const WCHAR TITLE_PARAM_GAIN[] = _T("增益\n(dB)") ;
const STRUCT_PARAM_ICON PARAM_GAIN = {ID_PARAM_GAIN, EDIT_PARAM, FLOAT_DATA, BK_DEFAULT, TITLE_PARAM_GAIN, 0, NULL} ;

const WCHAR TITLE_PARAM_FILE[] = _T("文件: ") ;
const STRUCT_PARAM_ICON PARAM_FILE = {ID_PARAM_FILE, SHOW_PARAM_ONLY, STR_PTR, BK_DEFAULT, TITLE_PARAM_FILE, 0, NULL} ;

const STRUCT_ENUM_ITEM GATE_I = {ID_PARAM_GATE_I, _T("闸门I")} ;
const STRUCT_ENUM_ITEM GATE_A = {ID_PARAM_GATE_A, _T("闸门A")} ;
const STRUCT_ENUM_ITEM GATE_B = {ID_PARAM_GATE_B, _T("闸门B")} ;
const STRUCT_ENUM_ITEM GATE_C = {ID_PARAM_GATE_C, _T("闸门C")} ;

const STRUCT_ENUM_ITEM	ENUM_GATE[] = {GATE_I, GATE_A, GATE_B, GATE_C} ;
const WCHAR TITLE_PARAM_GATE_IDX[] = _T("闸门：") ;
const STRUCT_PARAM_ICON	PARAM_GATE_IDX = {ID_PARAM_GATE_IDX, CHECK_PARAM, ENUM_GATE_IDX, BK_DEFAULT, TITLE_PARAM_GATE_IDX, ARRAYSIZE(ENUM_GATE), (STRUCT_PARAM_ICON *)ENUM_GATE} ;

const WCHAR TITLE_PARAM_ECHO_AMP[] = _T("回波幅度\n(%)") ;
const STRUCT_PARAM_ICON PARAM_ECHO_AMP = {ID_PARAM_ECHO_AMP, SHOW_PARAM_ONLY, FLOAT_DATA, BK_DEFAULT, TITLE_PARAM_ECHO_AMP, 0, NULL} ;
 
const WCHAR TITLE_PARAM_ECHO_DEPTH[] = _T("回波深度\n(mm)") ;
const STRUCT_PARAM_ICON PARAM_ECHO_DEPTH = {ID_PARAM_ECHO_DEPTH, SHOW_PARAM_ONLY, FLOAT_DATA, BK_DEFAULT, TITLE_PARAM_ECHO_DEPTH, 0, NULL} ;

const WCHAR TITLE_PARAM_ECHO_POS[] = _T("回波位置\n(mm)") ;
const STRUCT_PARAM_ICON PARAM_ECHO_POS = {ID_PARAM_ECHO_POS, SHOW_PARAM_ONLY, FLOAT_DATA, BK_DEFAULT, TITLE_PARAM_ECHO_POS, 0, NULL} ;

const WCHAR TITLE_PARAM_BEAM_DISTANCE[] = _T("声程距离\n(mm)") ;
const STRUCT_PARAM_ICON PARAM_BEAM_DISTANCE = {ID_PARAM_BEAM_DISTANCE, SHOW_PARAM_ONLY, FLOAT_DATA, BK_DEFAULT, TITLE_PARAM_BEAM_DISTANCE, 0, NULL} ;

const STRUCT_PARAM_ICON PARAM_INDICATOR[] = {{ID_PARAM_UNDEFINED, SHOW_PARAM_ONLY, STR_PTR, BK_DEFAULT, NULL, 0, NULL},
											{ID_PARAM_UNDEFINED, SHOW_PARAM_ONLY, STR_PTR, BK_DEFAULT, NULL, 0, NULL}} ;

const STRUCT_PARAM_ICON PARAM_MULTI_INDICATOR = {ID_PARAM_UNDEFINED, VERT_DIVIDED, WITHOUT_DATA, BK_DEFAULT, NULL, 
													ARRAYSIZE(PARAM_INDICATOR),  PARAM_INDICATOR} ;

const STRUCT_PARAM_ICON DEFAULT_PARAM_ICON_LINE_1[] = {PARAM_GAIN, 
														PARAM_FILE, 
														PARAM_MULTI_INDICATOR, 
														PARAM_GATE_IDX
													} ;
const STRUCT_PARAM_ICON DEFAULT_PARAM_ICON_LINE_2[] = {PARAM_ECHO_AMP, 
														PARAM_ECHO_DEPTH, 
														PARAM_ECHO_POS, 
														PARAM_BEAM_DISTANCE
													} ;
/*-------------------------------------------------------------------------------*/



/*-------------------------------------------------------------------------------*/
/*-----------------------------------快捷键定义----------------------------------*/
/*-------------------------------------------------------------------------------*/

/*----------- 单个快捷键属性 --------------*/
/* id: 每个参数栏有一个独特的id */
/* pTitle: 参数栏字符串指针 */
/* CntIcon_EnumItem:  参数栏下级项目数 */
/* SubIcon_EnumItem   参数栏下级项目数组指针*/
/*-----------------------------------------*/
typedef struct
{
	WORD id ;
	const WCHAR *pTitle ;
	int	CntEnumItem ;
	const STRUCT_ENUM_ITEM *pEnumItem ;
} STRUCT_ACCEL_ICON ;

const STRUCT_ENUM_ITEM ACCEL_LAYOUT_ENUM[] = {{ID_ACCEL_LAYOUT_FULL_SCREEN, _T("全屏")},
											{ID_ACCEL_LAYOUT_NORMAL, _T("正常")}
											} ;
const STRUCT_ACCEL_ICON ACCEL_LAYOUT = {ID_ACCEL_LAYOUT, _T("布局"), ARRAYSIZE(ACCEL_LAYOUT_ENUM), ACCEL_LAYOUT_ENUM} ;
	
const STRUCT_ACCEL_ICON ACCEL_PROBE = {ID_ACCEL_PROBE, _T("组"), 0, NULL} ;
const STRUCT_ACCEL_ICON ACCEL_CURSOR = {ID_ACCEL_CURSOR, _T("光标"), 0, NULL} ;
const STRUCT_ACCEL_ICON ACCEL_ANGLE = {ID_ACCEL_ANGLE, _T("角度"), 0, NULL} ;
const STRUCT_ACCEL_ICON ACCEL_SETTING = {ID_ACCEL_SETTING, _T("设置"), 0, NULL} ;
const STRUCT_ACCEL_ICON ACCEL_LIST[] = {ACCEL_LAYOUT,
										ACCEL_PROBE, 
										ACCEL_CURSOR, 
										ACCEL_ANGLE, 
										ACCEL_SETTING 
										} ;
/*-------------------------------------------------------------------------------*/
#endif